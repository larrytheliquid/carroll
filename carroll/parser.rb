#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.6
# from Racc grammer file "".
#

require 'racc/parser.rb'

  require "#{File.dirname __FILE__}/lexer"
  require "#{File.dirname __FILE__}/nodes"

module Carroll
  class Parser < Racc::Parser

module_eval(<<'...end grammar.y/module_eval...', 'grammar.y', 49)
  def parse code
    @tokens = Carroll::Lexer.new.tokenize code
    do_parse
  end

  def next_token
    @tokens.shift
  end
...end grammar.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    11,    19,     1,    25,    25,     3,     4,     1,     6,    23,
     3,     4,    29,     6,     2,    22,    34,    26,     1,     2,
    21,     3,     4,     1,     6,    24,     3,     4,    37,     6,
     2,    19,     8,     1,    10,     2,     3,     4,     1,     6,
    13,     3,     4,    35,     6,     2,     9,   nil,     1,   nil,
     2,     3,     4,   nil,     6,     1,    31,   nil,     3,     4,
     2,     6,   nil,   nil,   nil,    30,     1,     2,   nil,     3,
     4,     1,     6,   nil,     3,     4,   nil,     6,     2,    15,
    16,    17,   nil,     2,   nil,   nil,   nil,   nil,    14 ]

racc_action_check = [
     5,    29,     5,    32,    20,     5,     5,     0,     5,    13,
     0,     0,    24,     0,     5,    11,    32,    20,    36,     0,
    10,    36,    36,    34,    36,    14,    34,    34,    36,    34,
    36,     9,     1,    33,     4,    34,    33,    33,    31,    33,
     6,    31,    31,    33,    31,    33,     2,   nil,    28,   nil,
    31,    28,    28,   nil,    28,    27,    28,   nil,    27,    27,
    28,    27,   nil,   nil,   nil,    27,    21,    27,   nil,    21,
    21,    23,    21,   nil,    23,    23,   nil,    23,    21,     8,
     8,     8,   nil,    23,   nil,   nil,   nil,   nil,     8 ]

racc_action_pointer = [
     5,    19,    44,   nil,    32,     0,    38,   nil,    77,    29,
    13,    15,   nil,     0,    11,   nil,   nil,   nil,   nil,   nil,
     2,    64,   nil,    69,    -4,   nil,   nil,    53,    46,    -1,
   nil,    36,     1,    31,    21,   nil,    16,   nil ]

racc_action_default = [
   -14,   -14,   -14,    -5,   -14,   -14,   -14,    -1,   -14,   -14,
   -14,   -14,    -2,   -14,   -14,    -7,   -13,   -11,    -8,    -3,
   -14,   -14,    38,   -14,   -14,    -4,   -10,   -14,   -14,   -14,
    -6,   -14,   -14,   -14,   -14,    -9,   -14,   -12 ]

racc_goto_table = [
     5,    18,    12,   nil,   nil,   nil,    20,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    27,   nil,    28,    12,    12,    32,   nil,   nil,   nil,
    12,    33,   nil,    12,    36 ]

racc_goto_check = [
     1,     4,     2,   nil,   nil,   nil,     3,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,     1,   nil,     1,     2,     2,     3,   nil,   nil,   nil,
     2,     1,   nil,     2,     1 ]

racc_goto_pointer = [
   nil,     0,    -3,    -3,    -7 ]

racc_goto_default = [
   nil,   nil,     7,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 18, :_reduce_1,
  2, 18, :_reduce_2,
  1, 20, :_reduce_3,
  2, 20, :_reduce_4,
  1, 19, :_reduce_5,
  5, 19, :_reduce_6,
  3, 19, :_reduce_7,
  3, 19, :_reduce_8,
  7, 19, :_reduce_9,
  4, 19, :_reduce_10,
  1, 21, :_reduce_11,
  7, 21, :_reduce_12,
  1, 21, :_reduce_13 ]

racc_reduce_n = 14

racc_shift_n = 38

racc_token_table = {
  false => 0,
  :error => 1,
  :IDENTIFIER => 2,
  :LITERAL => 3,
  :NUMBER => 4,
  :SKIP => 5,
  :LOCAL => 6,
  :IN => 7,
  :IF => 8,
  :THEN => 9,
  :ELSE => 10,
  :PROC => 11,
  :END => 12,
  "=" => 13,
  "{" => 14,
  "}" => 15,
  "$" => 16 }

racc_nt_base = 17

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "IDENTIFIER",
  "LITERAL",
  "NUMBER",
  "SKIP",
  "LOCAL",
  "IN",
  "IF",
  "THEN",
  "ELSE",
  "PROC",
  "END",
  "\"=\"",
  "\"{\"",
  "\"}\"",
  "\"$\"",
  "$start",
  "Statements",
  "Statement",
  "Identifiers",
  "Value" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'grammar.y', 18)
  def _reduce_1(val, _values, result)
     result = Node::AST.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 19)
  def _reduce_2(val, _values, result)
     result = val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 23)
  def _reduce_3(val, _values, result)
     result = Array(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 24)
  def _reduce_4(val, _values, result)
     result = val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 28)
  def _reduce_5(val, _values, result)
     result = Node::Skip 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 29)
  def _reduce_6(val, _values, result)
     result = Node::Local.new val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 30)
  def _reduce_7(val, _values, result)
     result = Node::UnifyVariable.new val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 31)
  def _reduce_8(val, _values, result)
     result = Node::UnifyValue.new val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 32)
  def _reduce_9(val, _values, result)
     result = Node::Conditional.new val[1], val[3], val[5] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 33)
  def _reduce_10(val, _values, result)
     result = Node::Application.new val[1], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 37)
  def _reduce_11(val, _values, result)
     result = Node::Number.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 38)
  def _reduce_12(val, _values, result)
     result = Node::Procedure.new val[3], val[5] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 39)
  def _reduce_13(val, _values, result)
     result = Node::Literal.new val[0] 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Carroll
